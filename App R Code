library(shiny)
library(shinydashboard)
library(genius)
library(lubridate)
library(tidyverse)
library(spotifyr)
library(extrafont)
library(plotly)
library(shinycssloaders)
library(dashboardthemes)


source('setToken.R')
access_token <- get_spotify_access_token()
dateVariable <- Sys.Date()
mdyDate <-  format(dateVariable, format = "%B %d, %Y")

# custom theme
theme_jacob <- function () { 
  theme_minimal(base_size=10, base_family="Gill Sans MT") %+replace% 
    theme(
      panel.grid.minor = element_blank(),
      panel.background = element_rect(fill = "floralwhite"),
      plot.background = element_rect(fill = 'floralwhite', color = 'floralwhite')
    )
}

# data retrieval function
get_artist_data <- function(artist) {
  artist_Databb <- get_artist_audio_features(artist)
  artist_Databb <- artist_Databb %>%
    filter(!str_detect(album_name, 'Live In'),
           !str_detect(album_name, 'Concert'),
           !str_detect(album_name, 'Live'),
           !str_detect(album_name, 'Commentary'),
           !str_detect(album_name, 'Instrumentals'))
}

get_artist_song_count <- function(dataset){
  data1 <- dataset %>%
    distinct(track_name) %>%
    count(name = 'Songs')}

get_artist_album_count <- function(dataset){
  data2 <- dataset %>%
    distinct(album_name) %>%
    count(name = 'Albums')}

get_artist_statistics <- function(dataset){
  artist_Songs <- dataset %>%
    distinct(track_name) %>%
    count(name = 'Songs')
  
  artist_Albums <- dataset %>%
    distinct(album_name) %>%
    count(name = 'Albums')
  
  data3 <- dataset %>%
    select(valence, energy) %>%
    mutate(avg_valence = mean(valence * 100),
           avg_energy = mean(energy * 100),
           avg_valence = round(avg_valence, 1),
           avg_energy = round(avg_energy, 1)) %>%
    select(-valence, -energy) %>%
    rename(Positivity = avg_valence, Energy = avg_energy) %>%
    head(1) %>%
    cbind(artist_Songs) %>%
    cbind(artist_Albums)}

get_album_timeline <- function(dataset){
  data4 <- dataset %>%
    distinct(album_name, album_release_date) %>%
    arrange(album_release_date)
}

# plot function
# plot function
myPlot <- function(df) {
  
  p <- df %>%
    ggplot(aes(valence, energy, color = album_name, text = paste(track_name, '<br>', album_name, '<br>',
                                                                 'Positivity ', round(valence, 2), '<br>',
                                                                 'Energy ', round(energy, 2)))) +
    geom_point(size = 2, alpha = 0.8) +
    geom_hline(yintercept = 0.5) +
    geom_vline(xintercept = 0.5) +
    scale_x_continuous(limits = c(0, 1), breaks = seq(0, 1, .1)) +
    scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, .1)) +
    annotate('text', x = 0.99, y = 1, label = 'Happy / Upbeat') +
    annotate('text', x = 0.99, y = 0, label = 'Mellow / Peaceful') +
    annotate('text', x = 0.01, y = 0, label = 'Sad / Slow') +
    annotate('text', x = 0.05, y = 1, label = 'Aggressive / Fast Paced') +
    labs(x = "Positivity",
         y = "Energy",
         color = 'Album',
         title = paste(df$artist_name, ' Song Distribution', sep = ""),
         subtitle = paste('Data collected via spotifyr Package on ', mdyDate, sep = "")) +
    theme_jacob() +
    theme(legend.position = 'top')
  ggplotly(p, tooltip = c('text')) %>%
    layout(title = list(text = paste0(paste(df$artist_name, ' Song Distribution', sep = ""),
                                      '<br>',
                                      '<sup>',
                                      paste('Data collected via spotifyr Package on ', mdyDate, sep = ""),
                                      '</sup>')))
  
}

# R SHINY DASHBOARD ----

# UI
ui <- dashboardPage(title = 'Spotify App',
                    header = dashboardHeader(title = "Spotify App"),
                    sidebar = dashboardSidebar(
                      sidebarMenu(
                        menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
                        menuItem("About", tabName = 'about', icon = icon('question octagon')),
                        menuItem("Github", icon = icon("send",lib='glyphicon'), 
                                 href = "https://github.com/jyablonski/spotify-app")
                      )
                    ),
                    body = dashboardBody(
                      shinyDashboardThemes(
                        theme = 'grey_light'),
                      tabItems(
                        tabItem(tabName = 'dashboard',

                      fluidRow(
                        box(
                          textInput("user_artist_search", h3("Type an Artist")), width = 4, height = 220, solidheader = TRUE),
                        box(
                          selectInput('select_artist', h3("Select your Artist from these matches on Spotify"),
                                      choices = c()),
                          actionButton("generate_plot", "Generate Plot",
                                       style = "background-color:#F0F0F0;
                      color:#000000;
                      border-color:#000000;
                      border-style:solid;
                      border-width:2px;
                      border-radius:5%;
                      font-size:15px;", icon = icon('play')), width = 4, height = 220, solidHeader = TRUE),
                        box(
                          htmlOutput('artist_album_img'), width = 2, height = 220, solidHeader = TRUE)
                      ),
                      fluidRow(
                        valueBoxOutput("songsBox", width = 3),
                        valueBoxOutput("albumsBox", width = 3),
                        valueBoxOutput("positivityBox", width = 3),
                        valueBoxOutput("energyBox", width = 3)
                      ),
                      fluidRow( 
                        box(
                          title = "Quadrant Analysis",
                          status = "success",
                          solidHeader = TRUE,
                          collapsible = FALSE,
                          width = 12,
                          plotlyOutput("spotify_plot", height = "600px") %>%
                            withSpinner(color="#0dc5c1")
                        )
                      )
                        ),
                      tabItem(tabName = 'about',
                              fluidRow(
                                fluidRow(
                                  column(
                                    box(
                                      title = div("About this Project", style = "padding-left: 20px", class = "h2"),
                                      column(
                                        "This dashboard allows users to type in and select a Spotify Artist and look at their
                                        song distribution. The app uses the spotifyr package to utilize Spotify's API to send &
                                        receive data based on the user's input.",
                                        tags$br(),
                                        tags$br(),
                                        "Spotify provides characteristics such as energy, tempo, positivity, and loudness for 
                                        every song on their platform.  I used these variables to create a quadrant analysis to 
                                        get a better idea of the Artist's musical style.",
                                        tags$br(),
                                        tags$br(),
                                        "The App was last updated on June 14, 2020.",

                                        h3("Developer"),
                                        "Jacob Yablonski | ",
                                        tags$a(href = "https://www.linkedin.com/in/jacobyablonski/", "LinkedIn"), "|",
                                        tags$a(href = "https://github.com/jyablonski", "Github"),
                                        width = 12,
                                        style = "padding-left: 20px; padding-right: 20px; padding-bottom: 40px; margin-top: -15px;"
                                      ),
                                      width = 6
                                    ),
                                    width = 12,
                                    style = "padding: 15px"
                                  )
                                )
                              )
                              )
                      )
                    )
)

# Server Logic
server <- function(input, output, session) {
  output$spotify_plot <- DT::renderDT(NULL)
  
  artist_info <- reactive({
    req(input$user_artist_search != '') # basically tells the server to wait until there's something in the input
    search_spotify(q = input$user_artist_search, type = c('artist')) %>% 
      filter(!duplicated(name)) %>%
      arrange(desc(popularity))
  })
  
  observeEvent(input$user_artist_search, {
    choices <- artist_info()$name
    names(choices) <- choices
    
    updateSelectInput(session, 'select_artist',
                      choices = choices,
                      selected = artist_info()$name[1])
    
  })
  
  selected_artist <- reactive({
    req(nrow(artist_info()) > 0) # tells the server to wait until we actually have data in artist_info()
    artist_info() %>% 
      filter(name == input$select_artist)
  })
  
  observeEvent(input$select_artist, {
    artist_img <- selected_artist()$images[[1]]$url[2]
    
    output$artist_album_img <- renderText({
      HTML(str_glue('<img src={artist_img} height="200">'))
    })
  })
  
  observeEvent(input$generate_plot, {
    my_artist <- input$select_artist
    
    artist_Data <- get_artist_data(artist = my_artist)
    artist_Songs <- get_artist_song_count(dataset = artist_Data)
    artist_Albums <- get_artist_album_count(dataset = artist_Data)
    artist_Statistics <- get_artist_statistics(dataset = artist_Data)
    artist_Album_Timeline <- get_album_timeline(dataset = artist_Data)
    
    output$spotify_plot <- renderPlotly({
      
      myPlot(artist_Data)
    })
    
    output$songsBox <- renderValueBox({
      valueBox(
        value = artist_Statistics$Songs, "Songs", icon = icon("music note list"), color = "red"
      )
    })
    output$albumsBox <- renderValueBox({
      valueBox(
        value = artist_Statistics$Albums, "Studio Albums", icon = icon("folder plus"), color = "green"
      )
    })
    output$positivityBox <- renderValueBox({
      valueBox(
        value = paste0(artist_Statistics$Positivity, '%'), "Average Positivity Score", icon = icon("plus square"), color = "blue"
      )
    })
    output$energyBox <- renderValueBox({
      valueBox(
        value = paste0(artist_Statistics$Energy, '%'), "Average Energy Score", icon = icon("battery full"), color = "orange"
      )
    })
    
  })
  
}

# Run the App
shinyApp(ui, server)
